"""_summary_
    Multiplayer-fps : projet Zone 01
    
    Tony Quedeville
    
    Scene: Labyrinthes
"""

# -----------------------------------------------------------------------------------------------
#  imports:
from OpenGL.GL import *
# from OpenGL.GLUT import *
# from OpenGL.GLU import *

from forms3D.plane import plane
from forms3D.cube import cube
from forms3D.texte import texte3D

# -----------------------------------------------------------------------------------------------
# globals:
largeur, hauteur = 000, 600

# Position et couleur de la lumière
light_position = [1.0, 1.0, 1.0, 0.0]
light_ambient = [0.2, 0.2, 0.2, 1.0]
light_diffuse = [1.0, 1.0, 1.0, 1.0]
light_specular = [1.0, 1.0, 1.0, 1.0]

# # Position et orientation de la caméra
# camera_position = [0.0, 0.0, 0.0]
# look_at_position = [0.0, 0.0, 0.0]
# up_vector = [0.0, 1.0, 0.0]
# # Variable pour stocker les positions de la caméra
# camera_yaw = 0.0
# camera_pitch = 0.0

# -----------------------------------------------------------------------------------------------

def init_light():
    glLightfv(GL_LIGHT0, GL_POSITION, light_position)
    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient)
    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse)
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular)
    glEnable(GL_LIGHTING)
    glEnable(GL_LIGHT0)
    glEnable(GL_DEPTH_TEST)
    glShadeModel(GL_SMOOTH)

level0=[
        [0, -1, 0, 0,-1,-1, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0],
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1, 0],
        [0,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0, 0, 0, 0,-1,-1, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0]
        ]

level1=[
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0],
        [0, 0, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1, 0],
        [0,-1, 0,-1, 0, 0,-1, 0, 0, 0, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0,-1,-1,-1, 0, 0, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1, 0, 0, 0,-1,-1, 0, 0],
        [0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0,-1,-1, 0],
        [0,-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0, 0, 0,-1,-1,-1,-1,-1, 0, 0,-1, 0, 0,-1,-1, 0, 0, 0],
        [0,-1, 0, 0, 0,-1, 0, 0, 0,-1,-1,-1, 0,-1,-1,-1, 0, 0, 0, 0, 0,-1, 0,-1,-1,-1, 0,-1, 0, 0,-1, 0],
        [0,-1,-1,-1, 0,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1, 0],
        [0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0,-1, 0,-1, 0],
        [0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1, 0],
        [0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1, 0],
        [0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0,-1, 0, 0, 0,-1, 0],
        [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ]

def scene(player_x, player_y):
    # Labyrinth centré
    for y, lig in enumerate(level1):
        for x, value in enumerate(lig):
            if value == 0:
                cube((x-player_x, 0, y-player_y), 0.45)
    
    # Labyrinth centré
    # larg = len(level0)
    # for y, lig in enumerate(level0):
    #     long = len(lig)
    #     for x, value in enumerate(lig):
    #         if value == 0:
    #             cube((x-long//2+1, 0, y-larg//2+1), 0.5)
    
    # cube((0, -.5, -5), 0.5)
    # texte3D("Toto", -.5, 0.5, -.5)
